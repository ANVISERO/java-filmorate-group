-- Удаление всех объектов и файлов
DROP
ALL OBJECTS
DELETE FILES;

-- Таблица пользователей Filmorate
CREATE TABLE IF NOT EXISTS User_Filmorate
(
    user_id     INTEGER       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email       VARCHAR(50)   NOT NULL    UNIQUE,
    login       VARCHAR(50)   NOT NULL    UNIQUE,
    name_user   VARCHAR(100)  NOT NULL,
    birthday    DATE
);

-- Таблица возрастных рейтингов MPA
CREATE TABLE IF NOT EXISTS Mpa
(
    mpa_id      INTEGER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_name    VARCHAR(20)    UNIQUE
);

-- Таблица жанров фильмов
CREATE TABLE IF NOT EXISTS Genre
(
    genre_id    INTEGER         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name  VARCHAR(50)     UNIQUE
);

-- Таблица фильмов
CREATE TABLE IF NOT EXISTS Film
(
    film_id      INTEGER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name    VARCHAR(100)   NOT NULL,
    description  VARCHAR(200),
    release_date DATE           NOT NULL,
    duration     INTEGER,
    rate         INTEGER,
    mpa_id       INTEGER        REFERENCES Mpa (mpa_id) ON DELETE CASCADE
);

-- Таблица связей между жанрами и фильмами
CREATE TABLE IF NOT EXISTS Genre_Film
(
    genre_film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id       INTEGER   REFERENCES Film (film_id) ON DELETE CASCADE,
    genre_id      INTEGER   REFERENCES Genre (genre_id) ON DELETE CASCADE
);

-- Таблица лайков фильмов от пользователей
CREATE TABLE IF NOT EXISTS Like_Film
(
    like_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id     INTEGER REFERENCES Film (film_id) ON DELETE CASCADE,
    user_id     INTEGER REFERENCES User_Filmorate (user_id) ON DELETE CASCADE
);

-- Таблица дружбы между пользователями
CREATE TABLE IF NOT EXISTS Friendship
(
    friendship_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    friend_id     INTEGER REFERENCES User_Filmorate (user_id) ON DELETE CASCADE,
    user_id       INTEGER REFERENCES User_Filmorate (user_id) ON DELETE CASCADE
);

-- Таблица режиссёров
CREATE TABLE IF NOT EXISTS Director
(
    director_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR(100) NOT NULL
);

-- Таблица связи между фильмом и режиссёром
CREATE TABLE IF NOT EXISTS Director_Film
(
    film_id     INTEGER REFERENCES Film (film_id) ON DELETE CASCADE,
    director_id INTEGER REFERENCES Director (director_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

--Таблица отзывов
CREATE TABLE IF NOT EXISTS Review
(
    review_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR(100),
    is_positive BOOLEAN,
    useful      INTEGER,
    user_id     INTEGER REFERENCES User_Filmorate (user_id) ON DELETE CASCADE,
    film_id     INTEGER REFERENCES Film (film_id) ON DELETE CASCADE
);

--Таблица оценок отзывов
CREATE TABLE IF NOT EXISTS Useful
(
    user_id     INTEGER REFERENCES User_Filmorate (user_id) ON DELETE CASCADE,
    film_id     INTEGER REFERENCES Film (film_id) ON DELETE CASCADE,
    review_id   INTEGER REFERENCES Review (review_id) ON DELETE CASCADE,
    is_positive BOOLEAN
);

--Таблица последних событий на платформе (лента событий)
CREATE TABLE IF NOT EXISTS Event_Feed
(
    event_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp  BIGINT,
    user_id    INTEGER REFERENCES User_Filmorate (user_id) ON DELETE CASCADE,
    event_type VARCHAR(100),
    operation  VARCHAR(200),
    entity_id  INTEGER
);